from sqlalchemy.orm import Session
from sqlalchemy import func, exc
from typing import List, Optional
from ..models import Product, Supply, Order, OrderStatus
from ..schemas.product import ProductCreate, ProductUpdate
from ..schemas.supply import SupplyCreate
from fastapi import HTTPException, status


def calculate_stock(product: Product, db: Session) -> int:
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    issued_orders = db.query(func.coalesce(func.sum(Order.qty), 0)).filter(
        Order.product_id == product.id,
        Order.status == OrderStatus.PAID_ISSUED
    ).scalar()
    
    # –û—Å—Ç–∞—Ç–æ–∫ = –æ–±—â–∏–π –ø—Ä–∏—Ö–æ–¥ - –≤—ã–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    stock = product.quantity - issued_orders
    return max(0, stock)


def is_low_stock(product: Product, stock: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∏–∑–∫–∏–π –ª–∏ –æ—Å—Ç–∞—Ç–æ–∫"""
    return stock < product.min_stock


def get_products(db: Session, skip: int = 0, limit: int = 100) -> List[Product]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏"""
    products = db.query(Product).offset(skip).limit(limit).all()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    for product in products:
        stock = calculate_stock(product, db)
        product.stock = stock
        product.is_low_stock = is_low_stock(product, stock)
    
    return products


def get_product(db: Session, product_id: int) -> Optional[Product]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º"""
    product = db.query(Product).filter(Product.id == product_id).first()
    if product:
        stock = calculate_stock(product, db)
        product.stock = stock
        product.is_low_stock = is_low_stock(product, stock)
    return product


def create_product(db: Session, product_data: ProductCreate) -> Product:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    existing_product = db.query(Product).filter(Product.name == product_data.name).first()
    if existing_product:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
    product = Product(
        name=product_data.name,
        description=product_data.description,
        min_stock=product_data.min_stock,
        buy_price_eur=product_data.buy_price_eur,
        sell_price_rub=product_data.sell_price_rub,
        supplier_name=product_data.supplier_name,
        quantity=product_data.initial_quantity
    )
    
    db.add(product)
    db.commit()
    db.refresh(product)
    
    return product


def update_product(db: Session, product_id: int, product_data: ProductUpdate) -> Optional[Product]:
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"""
    product = db.query(Product).filter(Product.id == product_id).first()
    if not product:
        return None
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    update_data = product_data.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(product, field, value)
    
    db.commit()
    db.refresh(product)
    
    return product


def delete_product(db: Session, product_id: int, force: bool = False) -> bool:
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
    
    Args:
        db: –°–µ—Å—Å–∏—è –ë–î
        product_id: ID —Ç–æ–≤–∞—Ä–∞
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
    """
    print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ID: {product_id} (force={force})")  # –û—Ç–ª–∞–¥–∫–∞
    
    product = db.query(Product).filter(Product.id == product_id).first()
    if not product:
        print(f"‚ùå –¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")  # –û—Ç–ª–∞–¥–∫–∞
        return False
    
    print(f"‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {product.name}")  # –û—Ç–ª–∞–¥–∫–∞
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ)
        active_orders = db.query(Order).filter(
            Order.product_id == product_id,
            Order.status != OrderStatus.PAID_DENIED
        ).first()
        
        if active_orders and not force:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")  # –û—Ç–ª–∞–¥–∫–∞
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ."
            )
        
        if active_orders and force:
            print(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {product_id} —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏")  # –û—Ç–ª–∞–¥–∫–∞
        
        print(f"‚úÖ –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä {product.name}")  # –û—Ç–ª–∞–¥–∫–∞
        db.delete(product)
        db.commit()
        print(f"‚úÖ –¢–æ–≤–∞—Ä {product.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")  # –û—Ç–ª–∞–¥–∫–∞
        return True
        
    except exc.IntegrityError as e:
        db.rollback()
        print(f"‚ùå FK –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")  # –û—Ç–ª–∞–¥–∫–∞
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–¢–æ–≤–∞—Ä —Å–≤—è–∑–∞–Ω —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω"
        )
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")  # –û—Ç–ª–∞–¥–∫–∞
        raise e


def create_supply(db: Session, supply_data: SupplyCreate) -> Supply:
    """–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    product = db.query(Product).filter(Product.id == supply_data.product_id).first()
    if not product:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫—É
    supply = Supply(
        product_id=supply_data.product_id,
        qty=supply_data.qty,
        supplier_name=supply_data.supplier_name,
        buy_price_eur=supply_data.buy_price_eur
    )
    
    db.add(supply)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
    product.quantity += supply_data.qty
    
    db.commit()
    db.refresh(supply)
    
    return supply


def get_product_supplies(db: Session, product_id: int, skip: int = 0, limit: int = 100) -> List[Supply]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
    supplies = db.query(Supply).filter(
        Supply.product_id == product_id
    ).offset(skip).limit(limit).all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    for supply in supplies:
        if supply.product:
            supply.product_name = supply.product.name
    
    return supplies
