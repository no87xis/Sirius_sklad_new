from fastapi import APIRouter, Request, Form, HTTPException, status, Depends
from fastapi.responses import RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from ..db import get_db
from ..services.auth import authenticate_user, create_user, get_current_user_optional
from ..models import UserRole

router = APIRouter()
templates = Jinja2Templates(directory="app/templates")


@router.get("/login")
async def login_page(request: Request, db: Session = Depends(get_db)):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    current_user = get_current_user_optional(request, db)
    return templates.TemplateResponse("login.html", {"request": request, "current_user": current_user})


@router.post("/login")
async def login(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db)
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞"""
    print(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {username}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    user = authenticate_user(db, username, password)
    if not user:
        print(f"‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {username}")
        return RedirectResponse(
            url="/login?error=–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            status_code=status.HTTP_302_FOUND
        )
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
    request.session["user_id"] = user.username
    print(f"‚úÖ –°–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {user.username}: {request.session.get('user_id')}")
    
    return RedirectResponse(url="/?success=–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥", status_code=status.HTTP_302_FOUND)


@router.get("/register")
async def register_page(request: Request, db: Session = Depends(get_db)):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    current_user = get_current_user_optional(request, db)
    return templates.TemplateResponse("register.html", {"request": request, "current_user": current_user})


@router.post("/register")
async def register(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    confirm_password: str = Form(...),
    db: Session = Depends(get_db)
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if password != confirm_password:
        return RedirectResponse(
            url="/register?error=–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç",
            status_code=status.HTTP_302_FOUND
        )
    
    try:
        user = create_user(db, username, password, UserRole.USER)
        return RedirectResponse(
            url="/login?success=–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É",
            status_code=status.HTTP_302_FOUND
        )
    except HTTPException as e:
        return RedirectResponse(
            url=f"/register?error={e.detail}",
            status_code=status.HTTP_302_FOUND
        )


@router.get("/logout")
async def logout(request: Request):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    request.session.clear()
    return RedirectResponse(url="/?success=–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", status_code=status.HTTP_302_FOUND)


@router.get("/debug-session")
async def debug_session(request: Request, db: Session = Depends(get_db)):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏"""
    current_user = get_current_user_optional(request, db)
    
    debug_info = {
        "session_data": dict(request.session),
        "user_id_in_session": request.session.get("user_id"),
        "current_user": current_user.username if current_user else None,
        "user_role": current_user.role if current_user else None,
        "headers": dict(request.headers),
        "cookies": dict(request.cookies)
    }
    
    return {"debug_info": debug_info}
