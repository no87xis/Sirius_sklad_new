import uuid
from fastapi import APIRouter, Request, Form, HTTPException, status, Depends, Query
from fastapi.responses import RedirectResponse, HTMLResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from typing import Optional
from ..db import get_db
from ..services.auth import get_current_user_optional
from ..services.shop_cart import ShopCartService
from ..services.shop_orders import ShopOrderService
from ..services.qr_service import QRService

router = APIRouter()
templates = Jinja2Templates(directory="app/templates")


def get_session_id(request: Request) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã"""
    session_id = request.session.get("cart_session_id")
    if not session_id:
        session_id = str(uuid.uuid4())
        request.session["cart_session_id"] = session_id
    return session_id


@router.get("/shop", response_class=HTMLResponse)
async def shop_page(request: Request, db: Session = Depends(get_db)):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    from ..services.products import get_products
    products = get_products(db)
    return templates.TemplateResponse("shop/index.html", {
        "request": request,
        "products": products
    })


@router.get("/shop/cart", response_class=HTMLResponse)
async def cart_page(request: Request, db: Session = Depends(get_db)):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    session_id = get_session_id(request)
    cart_summary = ShopCartService.get_cart_summary(db, session_id)
    
    return templates.TemplateResponse("shop/cart.html", {
        "request": request,
        "cart": cart_summary
    })


@router.post("/shop/cart/add")
async def add_to_cart(
    request: Request,
    product_id: int = Form(...),
    quantity: int = Form(...),
    db: Session = Depends(get_db)
):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        session_id = get_session_id(request)
        
        from ..schemas.shop_cart import ShopCartCreate
        cart_data = ShopCartCreate(
            session_id=session_id,
            product_id=product_id,
            quantity=quantity
        )
        
        ShopCartService.add_to_cart(db, cart_data)
        return RedirectResponse(url="/shop/cart?success=–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", status_code=303)
    except Exception as e:
        return RedirectResponse(url="/shop/cart?error=add_failed", status_code=303)


@router.post("/shop/cart/remove")
async def remove_from_cart(
    request: Request,
    cart_item_id: int = Form(...),
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        ShopCartService.remove_from_cart(db, cart_item_id)
        return RedirectResponse(url="/shop/cart?success=–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", status_code=303)
    except Exception as e:
        return RedirectResponse(url="/shop/cart?error=remove_failed", status_code=303)


@router.get("/shop/checkout", response_class=HTMLResponse)
async def checkout_page(request: Request, db: Session = Depends(get_db)):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    session_id = get_session_id(request)
    cart_summary = ShopCartService.get_cart_summary(db, session_id)
    
    if not cart_summary.items:
        return RedirectResponse(url="/shop/cart", status_code=303)
    
    from ..services.payments import PaymentService
    payment_methods = PaymentService.get_active_payment_methods(db)
    
    return templates.TemplateResponse("shop/checkout.html", {
        "request": request,
        "cart": cart_summary,
        "payment_methods": payment_methods
    })


@router.post("/checkout")
async def process_checkout(
    request: Request,
    customer_name: str = Form(...),
    customer_phone: str = Form(...),
    customer_city: str = Form(...),
    customer_city_custom: Optional[str] = Form(None),
    payment_method_id: Optional[int] = Form(None),
    db: Session = Depends(get_db)
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    session_id = get_session_id(request)
    cart_summary = ShopCartService.get_cart_summary(db, session_id)
    
    if not cart_summary.items:
        return RedirectResponse(url="/shop/cart", status_code=303)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥
    final_city = customer_city
    if customer_city == 'custom' and customer_city_custom:
        final_city = customer_city_custom.strip()
    elif customer_city == 'custom' and not customer_city_custom:
        return RedirectResponse(url="/shop/checkout?error=–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", status_code=303)
    elif not customer_city:
        return RedirectResponse(url="/shop/checkout?error=–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", status_code=303)
    
    try:
        from app.schemas.shop_order import ShopOrderCreate
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = ShopOrderCreate(
            customer_name=customer_name,
            customer_phone=customer_phone,
            customer_city=final_city,
            payment_method_id=payment_method_id,
            cart_items=cart_summary.items
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã
        orders = ShopOrderService.create_orders_from_cart(db, order_data)
        
        if orders:
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            ShopCartService.clear_cart(db, session_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–¥—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
            order_codes = [order.order_code for order in orders]
            codes_param = ','.join(order_codes)
            
            return RedirectResponse(url=f"/shop/order-success?codes={codes_param}", status_code=303)
        else:
            return RedirectResponse(url="/shop/checkout?error=creation_failed", status_code=303)
            
    except Exception as e:
        return RedirectResponse(url=f"/shop/checkout?error={str(e)}", status_code=303)


@router.get("/shop/order-success", response_class=HTMLResponse)
async def order_success_page(request: Request, codes: str = Query(...), db: Session = Depends(get_db)):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    order_codes = codes.split(',')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã Order
    orders = []
    for code in order_codes:
        from app.models import Order
        order = db.query(Order).filter(Order.order_code == code).first()
        if order:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not hasattr(order, 'has_qr') or not order.has_qr:
                QRService.generate_qr_for_order(db, order)
            orders.append(order)
    
    return templates.TemplateResponse("shop/order-success.html", {
        "request": request,
        "orders": orders,
        "qr_service": QRService()
    })


@router.get("/shop/order/{order_code}", response_class=HTMLResponse)
async def order_detail_page(
    request: Request, 
    order_code: str, 
    db: Session = Depends(get_db)
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
    from app.models import Order
    order = db.query(Order).filter(Order.order_code == order_code).first()
    
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not hasattr(order, 'has_qr') or not order.has_qr:
        QRService.generate_qr_for_order(db, order)
    
    return templates.TemplateResponse("shop/order-detail.html", {
        "request": request,
        "order": order,
        "is_public_view": True,
        "qr_service": QRService()
    })


@router.get("/shop/search-order", response_class=HTMLResponse)
async def search_order_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞"""
    return templates.TemplateResponse("shop/search-order.html", {"request": request})


def generate_whatsapp_message(orders, request, db=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è WhatsApp"""
    if not orders:
        return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É."
    
    message_parts = ["üõç –ó–∞–∫–∞–∑ –≤ –º–∞–≥–∞–∑–∏–Ω–µ SIRIUS_GROUPE"]
    message_parts.append("")
    message_parts.append("üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:")
    
    for i, order in enumerate(orders, 1):
        message_parts.append(f"{i}. {order.product_name or '–¢–æ–≤–∞—Ä'}")
        message_parts.append(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.qty}")
        message_parts.append(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {order.unit_price_rub * order.qty} ‚ÇΩ")
        message_parts.append(f"   –ö–æ–¥ –∑–∞–∫–∞–∑–∞: {order.order_code}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ QR-—Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if order.has_qr:
            qr_url = QRService.get_qr_public_url(order)
            if qr_url:
                message_parts.append(f"   QR-—Å—Å—ã–ª–∫–∞: {request.base_url}{qr_url}")
        
        message_parts.append(f"   –°—Å—ã–ª–∫–∞: {request.base_url}orders/{order.order_code}")
        message_parts.append("")
    
    total_amount = sum(order.unit_price_rub * order.qty for order in orders)
    message_parts.append(f"üí∞ –ò—Ç–æ–≥–æ: {total_amount} ‚ÇΩ")
    message_parts.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {orders[0].phone if orders else ''}")
    message_parts.append(f"üë§ –ò–º—è: {orders[0].customer_name if orders else ''}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    city = orders[0].client_city if orders and orders[0].client_city else ''
    if city == 'custom':
        city = '–ù–µ —É–∫–∞–∑–∞–Ω'
    message_parts.append(f"üèô –ì–æ—Ä–æ–¥: {city}")
    message_parts.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–µ –æ–ø–ª–∞—Ç—ã
    from datetime import datetime, timedelta
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    payment_method_name = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    if orders and orders[0].payment_method_id:
        try:
            from ..services.payments import PaymentService
            payment_method = PaymentService.get_payment_method_by_id(db, orders[0].payment_method_id)
            if payment_method:
                payment_method_name = payment_method.name
        except Exception:
            payment_method_name = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    
    message_parts.append(f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method_name}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–µ
    message_parts.append("")
    message_parts.append("‚ö†Ô∏è –í–ê–ñ–ù–û: –¢–æ–≤–∞—Ä—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä—É—é—Ç—Å—è –Ω–∞ 48 —á–∞—Å–æ–≤!")
    message_parts.append("–í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã —Ä–µ–∑–µ—Ä–≤ —Å–Ω–∏–º–∞–µ—Ç—Å—è.")
    
    return "\n".join(message_parts)
