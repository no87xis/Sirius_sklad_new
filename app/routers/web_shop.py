from fastapi import APIRouter, Depends, HTTPException, Request, Form, Query
from fastapi.responses import HTMLResponse, RedirectResponse
from sqlalchemy.orm import Session
from typing import Optional
import uuid
from app.db import get_db
from app.models import PaymentMethodModel
from app.services.products import get_products
from app.services.shop_cart import ShopCartService
from app.services.shop_orders import ShopOrderService
from app.services.payments import PaymentService
from app.services.qr_service import QRService
from fastapi.templating import Jinja2Templates

templates = Jinja2Templates(directory="app/templates")

router = APIRouter(prefix="/shop", tags=["shop"])


def get_session_id(request: Request) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã"""
    session_id = request.session.get("cart_session_id")
    if not session_id:
        session_id = str(uuid.uuid4())
        request.session["cart_session_id"] = session_id
    return session_id


@router.get("/", response_class=HTMLResponse)
async def shop_catalog(
    request: Request,
    db: Session = Depends(get_db)
):
    """–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞"""
    products = get_products(db)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    session_id = get_session_id(request)
    cart_count = ShopCartService.get_cart_count(db, session_id)
    
    return templates.TemplateResponse("shop/catalog.html", {
        "request": request,
        "products": products,
        "cart_count": cart_count
    })


@router.get("/product/{product_id:int}", response_class=HTMLResponse)
async def shop_product_detail(
    request: Request,
    product_id: int,
    db: Session = Depends(get_db)
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"""
    from app.services.products import get_product
    
    product = get_product(db, product_id)
    if not product:
        raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    session_id = get_session_id(request)
    cart_count = ShopCartService.get_cart_count(db, session_id)
    
    return templates.TemplateResponse("shop/product.html", {
        "request": request,
        "product": product,
        "cart_count": cart_count
    })


@router.get("/cart", response_class=HTMLResponse)
async def shop_cart(
    request: Request,
    db: Session = Depends(get_db)
):
    """–ö–æ—Ä–∑–∏–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    session_id = get_session_id(request)
    cart_summary = ShopCartService.get_cart_summary(db, session_id)
    
    return templates.TemplateResponse("shop/cart.html", {
        "request": request,
        "cart": cart_summary
    })


@router.post("/cart/add")
async def add_to_cart_post(
    request: Request,
    product_id: int = Form(...),
    quantity: int = Form(1),
    db: Session = Depends(get_db)
):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É (POST)"""
    session_id = get_session_id(request)
    
    try:
        from app.schemas.shop_cart import ShopCartCreate
        cart_data = ShopCartCreate(session_id=session_id, product_id=product_id, quantity=quantity)
        result = ShopCartService.add_to_cart(db, cart_data)
        if result:
            return RedirectResponse(url="/shop/cart", status_code=303)
        else:
            return RedirectResponse(url="/shop/cart?error=add_failed", status_code=303)
    except Exception as e:
        return RedirectResponse(url=f"/shop/cart?error={str(e)}", status_code=303)


@router.post("/cart/remove")
async def remove_from_cart_post(
    request: Request,
    product_id: int = Form(...),
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (POST)"""
    session_id = get_session_id(request)
    
    try:
        success = ShopCartService.remove_from_cart(db, session_id, product_id)
        return RedirectResponse(url="/shop/cart", status_code=303)
    except Exception as e:
        return RedirectResponse(url=f"/shop/cart?error={str(e)}", status_code=303)


@router.post("/cart/update")
async def update_cart_item_post(
    request: Request,
    product_id: int = Form(...),
    quantity: int = Form(...),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ (POST)"""
    session_id = get_session_id(request)
    
    try:
        if quantity <= 0:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            success = ShopCartService.remove_from_cart(db, session_id, product_id)
            if success:
                return RedirectResponse(url="/shop/cart?success=–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", status_code=303)
            else:
                return RedirectResponse(url="/shop/cart?error=–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", status_code=303)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cart_item = ShopCartService.update_cart_item(db, session_id, product_id, quantity)
        if not cart_item:
            return RedirectResponse(url="/shop/cart?error=–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", status_code=303)
        
        return RedirectResponse(url="/shop/cart?success=–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", status_code=303)
    except Exception as e:
        return RedirectResponse(url=f"/shop/cart?error={str(e)}", status_code=303)


@router.get("/checkout", response_class=HTMLResponse)
async def shop_checkout(
    request: Request,
    db: Session = Depends(get_db)
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    session_id = get_session_id(request)
    cart_summary = ShopCartService.get_cart_summary(db, session_id)
    
    if not cart_summary.items:
        return RedirectResponse(url="/shop/cart", status_code=303)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    payment_methods = db.query(PaymentMethodModel).all()
    
    return templates.TemplateResponse("shop/checkout.html", {
        "request": request,
        "cart": cart_summary,
        "payment_methods": payment_methods
    })


@router.post("/checkout")
async def process_checkout(
    request: Request,
    customer_name: str = Form(...),
    customer_phone: str = Form(...),
    customer_city: str = Form(...),
    delivery_option: str = Form(...),
    delivery_city_other: Optional[str] = Form(None),
    payment_method_id: Optional[int] = Form(None),
    db: Session = Depends(get_db)
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏"""
    session_id = get_session_id(request)
    cart_summary = ShopCartService.get_cart_summary(db, session_id)
    
    if not cart_summary.items:
        return RedirectResponse(url="/shop/cart", status_code=303)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥ –∏ –¥–æ—Å—Ç–∞–≤–∫—É
    final_city = customer_city
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏
    if delivery_option == 'COURIER_OTHER' and not delivery_city_other:
        return RedirectResponse(url="/shop/checkout?error=–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏", status_code=303)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    if delivery_option == 'COURIER_OTHER' and delivery_city_other:
        final_city = delivery_city_other.strip()
    elif delivery_option == 'SELF_PICKUP_GROZNY':
        final_city = '–ì—Ä–æ–∑–Ω—ã–π'
    elif delivery_option == 'COURIER_GROZNY':
        final_city = '–ì—Ä–æ–∑–Ω—ã–π'
    elif delivery_option == 'COURIER_MAK':
        final_city = '–ú–∞—Ö–∞—á–∫–∞–ª–∞'
    elif delivery_option == 'COURIER_KHAS':
        final_city = '–•–∞—Å–∞–≤—é—Ä—Ç'
    
    try:
        from app.schemas.shop_order import ShopOrderCreate
        from app.constants.delivery import calculate_delivery_cost
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_cost = calculate_delivery_cost(delivery_option, cart_summary.total_items)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = ShopOrderCreate(
            customer_name=customer_name,
            customer_phone=customer_phone,
            customer_city=final_city,
            payment_method_id=payment_method_id,
            delivery_option=delivery_option,
            delivery_city_other=delivery_city_other if delivery_option == 'COURIER_OTHER' else None,
            delivery_cost_rub=delivery_cost,
            cart_items=cart_summary.items
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã
        orders = ShopOrderService.create_orders_from_cart(db, order_data)
        
        if orders:
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            ShopCartService.clear_cart(db, session_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–¥—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
            order_codes = [order.order_code for order in orders]
            codes_param = ','.join(order_codes)
            
            return RedirectResponse(url=f"/shop/order-success?codes={codes_param}", status_code=303)
        else:
            return RedirectResponse(url="/shop/checkout?error=creation_failed", status_code=303)
            
    except Exception as e:
        return RedirectResponse(url=f"/shop/checkout?error={str(e)}", status_code=303)


def generate_whatsapp_message(orders, request, db=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è WhatsApp"""
    if not orders:
        return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É."
    
    message_parts = ["üõç –ó–∞–∫–∞–∑ –≤ –º–∞–≥–∞–∑–∏–Ω–µ SIRIUS_GROUPE"]
    message_parts.append("")
    message_parts.append("üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:")
    
    for i, order in enumerate(orders, 1):
        message_parts.append(f"{i}. {order.product_name or '–¢–æ–≤–∞—Ä'}")
        message_parts.append(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.qty}")
        message_parts.append(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {order.unit_price_rub * order.qty} ‚ÇΩ")
        message_parts.append(f"   –ö–æ–¥ –∑–∞–∫–∞–∑–∞: {order.order_code}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ QR-—Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if order.has_qr:
            qr_url = QRService.get_qr_public_url(order)
            if qr_url:
                message_parts.append(f"   QR-—Å—Å—ã–ª–∫–∞: {request.base_url}{qr_url}")
        
        message_parts.append(f"   –°—Å—ã–ª–∫–∞: {request.base_url}orders/{order.order_code}")
        message_parts.append("")
    
    total_amount = sum(order.unit_price_rub * order.qty for order in orders)
    message_parts.append(f"üí∞ –ò—Ç–æ–≥–æ: {total_amount} ‚ÇΩ")
    message_parts.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {orders[0].phone if orders else ''}")
    message_parts.append(f"üë§ –ò–º—è: {orders[0].customer_name if orders else ''}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    city = orders[0].client_city if orders and orders[0].client_city else ''
    if city == 'custom':
        city = '–ù–µ —É–∫–∞–∑–∞–Ω'
    message_parts.append(f"üèô –ì–æ—Ä–æ–¥: {city}")
    message_parts.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–µ –æ–ø–ª–∞—Ç—ã
    from datetime import datetime, timedelta
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    payment_method_name = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    if orders and orders[0].payment_method_id:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ relationship
        if hasattr(orders[0], 'payment_method') and orders[0].payment_method:
            payment_method_name = orders[0].payment_method.name
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –±–µ—Ä–µ–º –∏–∑ –ø–æ–ª—è payment_method_name
        elif hasattr(orders[0], 'payment_method_name') and orders[0].payment_method_name:
            payment_method_name = orders[0].payment_method_name
        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ
        elif db:
            try:
                from app.models import PaymentMethod as PaymentMethodEnum
                payment_method = db.query(PaymentMethodModel).filter(PaymentMethodModel.id == orders[0].payment_method_id).first()
                if payment_method:
                    payment_method_name = payment_method.name
            except Exception as e:
                payment_method_name = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    
    if orders and hasattr(orders[0], 'created_at') and orders[0].created_at:
        created_at = orders[0].created_at
        if isinstance(created_at, str):
            created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
        reserve_until = created_at + timedelta(hours=48)
        message_parts.append(f"‚è∞ –†–µ–∑–µ—Ä–≤ –¥–æ {reserve_until.strftime('%H:%M %d.%m.%Y')}")
    else:
        now = datetime.now()
        reserve_until = now + timedelta(hours=48)
        message_parts.append(f"‚è∞ –†–µ–∑–µ—Ä–≤ –¥–æ {reserve_until.strftime('%H:%M %d.%m.%Y')}")
    
    message_parts.append(f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method_name}")
    
    return "\n".join(message_parts)


@router.get("/order-success", response_class=HTMLResponse)
async def order_success(
    request: Request,
    codes: str,
    db: Session = Depends(get_db)
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    order_codes = codes.split(',')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã Order
    orders = []
    for code in order_codes:
        # –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ –∫–æ–¥—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ Order
        from app.models import Order
        order = db.query(Order).filter(Order.order_code == code).first()
        if order:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not hasattr(order, 'has_qr') or not order.has_qr:
                QRService.generate_qr_for_order(db, order)
            orders.append(order)
    
    return templates.TemplateResponse("shop/order-success.html", {
        "request": request,
        "orders": orders,
        "generate_whatsapp_message": generate_whatsapp_message,
        "qr_service": QRService
    })


@router.get("/order/{order_code}", response_class=HTMLResponse)
async def view_order(
    request: Request,
    order_code: str,
    db: Session = Depends(get_db)
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞ –ø–æ –∫–æ–¥—É"""
    from app.models import Order
    order = db.query(Order).filter(Order.order_code == order_code).first()
    
    if not order:
        return templates.TemplateResponse("shop/order-not-found.html", {
            "request": request,
            "order_code": order_code
        })
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not order.has_qr:
        QRService.generate_qr_for_order(db, order)
    
    return templates.TemplateResponse("shop/order-detail.html", {
        "request": request,
        "order": order,
        "qr_service": QRService
    })


@router.get("/search-order", response_class=HTMLResponse)
async def search_order_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞"""
    return templates.TemplateResponse("shop/search-order.html", {
        "request": request
    })


@router.post("/search-order")
async def search_order_post(
    request: Request,
    order_code: str = Form(...),
    phone: str = Form(...),
    db: Session = Depends(get_db)
):
    """–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ (POST)"""
    from app.services.orders import get_orders_by_phone
    from app.models import Order
    
    # –ò—â–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    orders = get_orders_by_phone(db, phone)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–¥—É –∑–∞–∫–∞–∑–∞
    if order_code:
        if len(order_code) == 4:
            # –ü–æ–∏—Å–∫ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 4 —Å–∏–º–≤–æ–ª–∞–º
            orders = [order for order in orders if order.order_code_last4 == order_code]
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É –∫–æ–¥—É
            orders = [order for order in orders if order.order_code == order_code]
    
    if not orders:
        return templates.TemplateResponse("shop/search-order.html", {
            "request": request,
            "error": "–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        })
    
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –∑–∞–∫–∞–∑, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if len(orders) == 1:
        return RedirectResponse(
            url=f"/shop/order/{orders[0].order_code}?phone={phone}", 
            status_code=303
        )
    
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    return templates.TemplateResponse("shop/orders-list.html", {
        "request": request,
        "orders": orders,
        "phone": phone
    })

# –ü—É–±–ª–∏—á–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ QR-–∫–æ–¥—É
@router.get("/o/{qr_token}", response_class=HTMLResponse)
async def public_order_view(
    request: Request,
    qr_token: str,
    db: Session = Depends(get_db)
):
    """–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞ –ø–æ QR-—Ç–æ–∫–µ–Ω—É (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    if not QRService.is_valid_qr_token(qr_token):
        raise HTTPException(status_code=404, detail="–ù–µ–≤–µ—Ä–Ω—ã–π QR-–∫–æ–¥")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ QR-—Ç–æ–∫–µ–Ω—É
    order = QRService.get_order_by_qr_token(db, qr_token)
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω
    from app.models import ShopOrderStatus
    if order.status == ShopOrderStatus.CANCELLED:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
    
    return templates.TemplateResponse("shop/order-detail.html", {
        "request": request,
        "order": order,
        "qr_service": QRService,
        "is_public_view": True  # –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    })

