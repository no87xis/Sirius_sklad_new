#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.orm import Session
from app.db import SessionLocal, engine, Base
from app.models import User, Product, Order, PaymentMethodModel, PaymentInstrument, CashFlow
from app.services.order_code import OrderCodeService
from app.services.payments import PaymentService
from decimal import Decimal
from datetime import datetime

def fill_missing_data():
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    db = SessionLocal()
    
    try:
        print("üîß –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        # 1. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
        print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã...")
        
        payment_methods = [
            {'name': '–ù–∞–ª–∏—á–Ω—ã–µ –Ω–∞ —Å–∫–ª–∞–¥–µ', 'type': 'cash'},
            {'name': '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É', 'type': 'card'},
            {'name': 'USDT', 'type': 'crypto'},
            {'name': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥', 'type': 'bank'},
            {'name': '–î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±', 'type': 'other'}
        ]
        
        created_methods = {}
        for method_data in payment_methods:
            existing = db.query(PaymentMethodModel).filter(PaymentMethodModel.name == method_data['name']).first()
            if not existing:
                method = PaymentMethodModel(
                    name=method_data['name'],
                    type=method_data['type'],
                    is_active=True
                )
                db.add(method)
                db.commit()
                db.refresh(method)
                created_methods[method_data['name']] = method
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –º–µ—Ç–æ–¥: {method.name}")
            else:
                created_methods[method_data['name']] = existing
                print(f"   ‚ÑπÔ∏è  –ú–µ—Ç–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing.name}")
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
        print("\n2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤...")
        
        orders_without_code = db.query(Order).filter(Order.order_code.is_(None)).all()
        if orders_without_code:
            for order in orders_without_code:
                order_code = OrderCodeService.generate_unique_order_code(db)
                order.order_code = order_code
                order.order_code_last4 = order_code[-4:]
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
                if not order.payment_method_id:
                    default_method = created_methods.get('–î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±')
                    if default_method:
                        order.payment_method_id = default_method.id
                
                print(f"   ‚úÖ –ó–∞–∫–∞–∑ #{order.id}: –∫–æ–¥ {order_code}")
        else:
            print("   ‚ÑπÔ∏è  –í—Å–µ –∑–∞–∫–∞–∑—ã —É–∂–µ –∏–º–µ—é—Ç –∫–æ–¥—ã")
        
        # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        print("\n3Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤...")
        
        products_without_status = db.query(Product).filter(Product.availability_status.is_(None)).all()
        if products_without_status:
            for product in products_without_status:
                product.availability_status = 'IN_STOCK'
                print(f"   ‚úÖ –¢–æ–≤–∞—Ä #{product.id}: —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 'IN_STOCK'")
        else:
            print("   ‚ÑπÔ∏è  –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å")
        
        # 4. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã
        print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã...")
        
        # –î–ª—è –º–µ—Ç–æ–¥–∞ "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É" —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–∞—Ä—Ç—É
        card_method = created_methods.get('–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É')
        if card_method:
            existing_card = db.query(PaymentInstrument).filter(
                PaymentInstrument.name == '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞',
                PaymentInstrument.method_id == card_method.id
            ).first()
            
            if not existing_card:
                card_instrument = PaymentInstrument(
                    name='–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞',
                    method_id=card_method.id,
                    is_active=True
                )
                db.add(card_instrument)
                print("   ‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞")
        
        # 5. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        
        print("\nüéØ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        # 6. –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(f"   - –ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã: {db.query(PaymentMethodModel).count()}")
        print(f"   - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã: {db.query(PaymentInstrument).count()}")
        print(f"   - –ó–∞–∫–∞–∑—ã —Å –∫–æ–¥–∞–º–∏: {db.query(Order).filter(Order.order_code.isnot(None)).count()}")
        print(f"   - –¢–æ–≤–∞—Ä—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {db.query(Product).filter(Product.availability_status.isnot(None)).count()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
        import traceback
        traceback.print_exc()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    fill_missing_data()
