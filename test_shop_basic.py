#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.db import SessionLocal
from app.models import Product, ProductPhoto, ShopCart, ShopOrder
from app.services.shop_cart import ShopCartService
from app.services.shop_orders import ShopOrderService
from app.services.order_code import OrderCodeService

def test_shop_basic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –º–∞–≥–∞–∑–∏–Ω–∞...")
    
    db = SessionLocal()
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        products = db.query(Product).all()
        print(f"‚úÖ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(products)}")
        
        if not products:
            print("‚ö†Ô∏è  –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        test_codes = []
        for _ in range(5):
            code = OrderCodeService.generate_order_code()
            test_codes.append(code)
            print(f"   –ö–æ–¥ –∑–∞–∫–∞–∑–∞: {code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        if len(set(test_codes)) == len(test_codes):
            print("‚úÖ –ö–æ–¥—ã –∑–∞–∫–∞–∑–æ–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã")
        else:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–¥—ã!")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å –∫–æ—Ä–∑–∏–Ω—ã
        test_session = "test_session_123"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart_data = {
            "product_id": products[0].id,
            "quantity": 2,
            "session_id": test_session
        }
        
        try:
            from app.schemas.shop_cart import ShopCartCreate
            cart_item = ShopCartService.add_to_cart(db, ShopCartCreate(**cart_data))
            print(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É: ID {cart_item.id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            cart_summary = ShopCartService.get_cart_summary(db, test_session)
            print(f"‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞: {cart_summary.total_items} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ {cart_summary.total_amount} ‚ÇΩ")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ—Ä–∑–∏–Ω—É
            ShopCartService.clear_cart(db, test_session)
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π: {e}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –∑–∞–∫–∞–∑—ã
            expired_orders = ShopOrderService.get_expired_orders(db)
            print(f"‚úÖ –ò—Å—Ç—ë–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤: {len(expired_orders)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            analytics = ShopOrderService.get_analytics(db)
            print(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {analytics.total_orders} –∑–∞–∫–∞–∑–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏: {e}")
        
        print("\nüéØ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        db.close()

if __name__ == "__main__":
    test_shop_basic()
