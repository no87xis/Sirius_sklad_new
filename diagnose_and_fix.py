#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º Sirius Group
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏
"""

import os
import sys
import sqlite3
from pathlib import Path

def print_status(message, status="INFO"):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–∞–º–∏"""
    colors = {
        "INFO": "\033[94m",    # –°–∏–Ω–∏–π
        "SUCCESS": "\033[92m", # –ó–µ–ª–µ–Ω—ã–π
        "WARNING": "\033[93m", # –ñ–µ–ª—Ç—ã–π
        "ERROR": "\033[91m",   # –ö—Ä–∞—Å–Ω—ã–π
        "RESET": "\033[0m"     # –°–±—Ä–æ—Å
    }
    print(f"{colors.get(status, '')}[{status}]{colors['RESET']} {message}")

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print_status("–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...", "INFO")
    
    db_path = Path("app/database/sirius.db")
    
    if not db_path.exists():
        print_status("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", "ERROR")
        print_status("–°–æ–∑–¥–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...", "INFO")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        db_path.parent.mkdir(parents=True, exist_ok=True)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect(db_path)
            conn.close()
            print_status("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞", "SUCCESS")
        except Exception as e:
            print_status(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}", "ERROR")
            return False
    else:
        print_status("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞", "SUCCESS")
    
    return True

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print_status("–ü—Ä–æ–≤–µ—Ä—è—é –∏–º–ø–æ—Ä—Ç—ã...", "INFO")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        import app.config
        print_status("‚úì app.config", "SUCCESS")
        
        import app.db
        print_status("‚úì app.db", "SUCCESS")
        
        import app.models.order
        print_status("‚úì app.models.order", "SUCCESS")
        
        import app.constants.delivery
        print_status("‚úì app.constants.delivery", "SUCCESS")
        
        print_status("–í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç", "SUCCESS")
        return True
        
    except ImportError as e:
        print_status(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}", "ERROR")
        return False
    except Exception as e:
        print_status(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
        return False

def run_delivery_migration():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏"""
    print_status("–ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏...", "INFO")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        from migrations.add_delivery_system import migrate
        
        if migrate():
            print_status("–ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–∞", "SUCCESS")
            return True
        else:
            print_status("–ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å", "ERROR")
            return False
            
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}", "ERROR")
        return False

def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤"""
    print_status("–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤...", "INFO")
    
    required_files = [
        "app/main.py",
        "app/config.py",
        "app/db.py",
        "app/models/order.py",
        "app/constants/delivery.py",
        "app/schemas/shop_order.py",
        "app/templates/shop/checkout.html",
        "app/templates/shop/delivery_payment.html",
        "app/routers/delivery_payment.py",
        "migrations/add_delivery_system.py"
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if Path(file_path).exists():
            print_status(f"‚úì {file_path}", "SUCCESS")
        else:
            print_status(f"‚úó {file_path}", "ERROR")
            missing_files.append(file_path)
    
    if missing_files:
        print_status(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {len(missing_files)}", "WARNING")
        return False
    else:
        print_status("–í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ", "SUCCESS")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_status("üöÄ –ù–∞—á–∏–Ω–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É Sirius Group", "INFO")
    print_status("=" * 50, "INFO")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
    if not check_file_structure():
        print_status("–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–π–ª–∞–º–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å", "ERROR")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if not check_imports():
        print_status("–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å", "ERROR")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not check_database():
        print_status("–ü—Ä–æ–±–ª–µ–º—ã —Å –ë–î, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å", "ERROR")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if not run_delivery_migration():
        print_status("–ü—Ä–æ–±–ª–µ–º—ã —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π", "WARNING")
    
    print_status("=" * 50, "INFO")
    print_status("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "SUCCESS")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)





